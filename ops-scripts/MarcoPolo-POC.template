{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Testing Marco-Polo POC - service registry and discovery using a combination of Nerve, NGinx and Consul",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large",
        "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge",
        "c3.4xlarge", "c3.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
        "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "OperatorEMail": {
      "Description": "EMail address to notify if there are any scaling operations",
      "Type": "String",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "Default": "rreinhold@expedia.com",
      "ConstraintDescription": "must be a valid email address."
    },

    "KeyName" : {
      "Description" : "The EC2 Key Pair to allow SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Default": "ewetest",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "ScaleGroupSize" : {
      "Description" : "The # of instances to run in parallel. Same value is used for each 'service' - Alice, Bob, Charlie",
      "Type": "Number",
      "Default": "1"
    },

    "SubnetList" : {
      "Description" : "Subnets to attach to",
      "Type" : "List<AWS::EC2::Subnet::Id>",
      "Default": "subnet-86fecaf2,subnet-7d2c7a3b"
    },

    "SecurityGroupList" : {
      "Description" : "Security groups to apply",
      "Type" : "List<AWS::EC2::SecurityGroup::Id>",
      "Default": "sg-cca751a3,sg-a7a751c8,sg-afa751c0,sg-95942bf1"
    }

  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   },
      "c1.xlarge"   : { "Arch" : "PV64"   },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "PV64" : "ami-50842d38", "HVM64" : "ami-08842d60", "HVMG2" : "ami-3a329952"  },
      "us-west-2"      : { "PV64" : "ami-af86c69f", "HVM64" : "ami-8786c6b7", "HVMG2" : "ami-47296a77"  },
      "us-west-1"      : { "PV64" : "ami-c7a8a182", "HVM64" : "ami-cfa8a18a", "HVMG2" : "ami-331b1376"  },
      "eu-west-1"      : { "PV64" : "ami-aa8f28dd", "HVM64" : "ami-748e2903", "HVMG2" : "ami-00913777"  },
      "ap-southeast-1" : { "PV64" : "ami-20e1c572", "HVM64" : "ami-d6e1c584", "HVMG2" : "ami-fabe9aa8"  },
      "ap-northeast-1" : { "PV64" : "ami-21072820", "HVM64" : "ami-35072834", "HVMG2" : "ami-5dd1ff5c"  },
      "ap-southeast-2" : { "PV64" : "ami-8b4724b1", "HVM64" : "ami-fd4724c7", "HVMG2" : "ami-e98ae9d3"  },
      "sa-east-1"      : { "PV64" : "ami-9d6cc680", "HVM64" : "ami-956cc688", "HVMG2" : "NOT_SUPPORTED" },
      "cn-north-1"     : { "PV64" : "ami-a857c591", "HVM64" : "ami-ac57c595", "HVMG2" : "NOT_SUPPORTED" },
      "eu-central-1"   : { "PV64" : "ami-a03503bd", "HVM64" : "ami-b43503a9", "HVMG2" : "ami-b03503ad"  }
    }

  },

  "Resources" : {
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Ref": "OperatorEMail" }, "Protocol": "email" } ]
      }
    },

    "ConsulServer" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "IamInstanceProfile" : "e3-prime-instance",
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType" : { "Ref" : "InstanceType" },
        "SecurityGroupIds" : { "Ref" : "SecurityGroupList"},
        "SubnetId" : "subnet-86fecaf2",
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : "MarcoPolo - Consul Service"
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",

          "#Install consul and server config", "\n",
          "wget https://github.com/robreinhold/marco-polo/raw/master/consul/consul -O ~/consul", "\n",
          "chmod +x ~/consul", "\n",
          "wget https://raw.githubusercontent.com/robreinhold/marco-polo/master/consul/server-config.json -O ~/server-config.json", "\n",
          "mkdir /opt/consul", "\n",
          "export LOCAL_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)", "\n",
          "nohup ~/consul agent -client $LOCAL_IP -pid-file ~/consul.pid -config-file ~/server-config.json &", "\n",
          "", "\n",
          ""
        ]]}}
      }
    },

    "AliceGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "AliceLaunchConfig" },
        "MinSize" : { "Ref" : "ScaleGroupSize"},
        "MaxSize" : { "Ref" : "ScaleGroupSize"},
        "VPCZoneIdentifier" : {"Ref" : "SubnetList"},
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : "MarcoPolo - Alice Service",
            "PropagateAtLaunch" : "true"
          }
        ],
        "NotificationConfigurations" : [{
          "TopicARN" : { "Ref" : "NotificationTopic" },
          "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
        }]
      }
    },

    "AliceLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : "Install a simple application",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "/tmp/message" : {
                "content" : { "Fn::Join" : ["", [
                  "hello"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "SecurityGroups" : { "Ref" : "SecurityGroupList"},
        "InstanceType" : { "Ref" : "InstanceType" },
        "IamInstanceProfile" : "e3-prime-instance",
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",

          "# Install NodeJS and NPM", "\n",
          "yum update -y", "\n",
          "yum install nodejs npm --enablerepo=epel -y", "\n",
          "npm install restify", "\n",

          "# Get the service and start", "\n",
          "cd ~", "\n",
          "wget https://raw.githubusercontent.com/robreinhold/marco-polo/master/rest-services/alice.js", "\n",
          "nohup node alice.js > ~/std.out &", "\n",

          "#Install consul and agent config", "\n",
          "wget https://github.com/robreinhold/marco-polo/raw/master/consul/consul -O ~/consul", "\n",
          "chmod +x ~/consul", "\n",
          "mkdir /opt/consul", "\n",
          "export SERVER_IP=", { "Fn::GetAtt": [ "ConsulServer", "PrivateIp" ] }, "\n",
          "nohup ~/consul agent -pid-file ~/consul.pid -join $SERVER_IP -data-dir /opt/consul -dc us-west-1-test &", "\n"

        ]]}}
      }
    },

    "BarneyGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "BarneyLaunchConfig" },
        "MinSize" : { "Ref" : "ScaleGroupSize"},
        "MaxSize" : { "Ref" : "ScaleGroupSize"},
        "VPCZoneIdentifier" : {"Ref" : "SubnetList"},
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : "MarcoPolo - Barney Service",
            "PropagateAtLaunch" : "true"
          }
        ],
        "NotificationConfigurations" : [{
          "TopicARN" : { "Ref" : "NotificationTopic" },
          "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
        }]
      }
    },

    "BarneyLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : "Install a simple application",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "/tmp/message" : {
                "content" : { "Fn::Join" : ["", [
                  "hello"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "SecurityGroups" : { "Ref" : "SecurityGroupList"},
        "InstanceType" : { "Ref" : "InstanceType" },
        "IamInstanceProfile" : "e3-prime-instance",
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",

          "# Install NodeJS and NPM", "\n",
          "yum update -y", "\n",
          "yum install nodejs npm --enablerepo=epel -y", "\n",
          "npm install restify", "\n",

          "# Get the service and start","\n",
          "cd ~", "\n",
          "wget https://raw.githubusercontent.com/robreinhold/marco-polo/master/rest-services/barney.js", "\n",
          "nohup node barney.js > ~/std.out &", "\n",

          "#Install consul and agent config", "\n",
          "wget https://github.com/robreinhold/marco-polo/raw/master/consul/consul -O ~/consul", "\n",
          "chmod +x ~/consul", "\n",
          "mkdir /opt/consul", "\n",
          "export SERVER_IP=", { "Fn::GetAtt": [ "ConsulServer", "PrivateIp" ] }, "\n",
          "nohup ~/consul agent -pid-file ~/consul.pid -join $SERVER_IP -data-dir /opt/consul -dc us-west-1-test &", "\n"

        ]]}}
      }
    },

    "CarlesGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "CarlesLaunchConfig" },
        "MinSize" : { "Ref" : "ScaleGroupSize"},
        "MaxSize" : { "Ref" : "ScaleGroupSize"},
        "VPCZoneIdentifier" : {"Ref" : "SubnetList"},
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : "MarcoPolo - Carles Service",
            "PropagateAtLaunch" : "true"
          }
        ],
        "NotificationConfigurations" : [{
          "TopicARN" : { "Ref" : "NotificationTopic" },
          "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
        }]
      }
    },

    "CarlesLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : "Install a simple application",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "/tmp/message" : {
                "content" : { "Fn::Join" : ["", [
                  "hello"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "SecurityGroups" : { "Ref" : "SecurityGroupList"},
        "InstanceType" : { "Ref" : "InstanceType" },
        "IamInstanceProfile" : "e3-prime-instance",
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "cd ~", "\n",

          "# Install NodeJS and NPM",  "\n",
          "yum update -y", "\n",
          "yum install nodejs npm --enablerepo=epel -y", "\n",
          "npm install restify", "\n",

          "# Get the service and start", "\n",
          "wget https://raw.githubusercontent.com/robreinhold/marco-polo/master/rest-services/carles.js", "\n",
          "nohup node carles.js > ~/std.out &", "\n",

          "#Install consul and agent config", "\n",
          "wget https://github.com/robreinhold/marco-polo/raw/master/consul/consul -O ~/consul", "\n",
          "chmod +x ~/consul", "\n",
          "mkdir /opt/consul", "\n",
          "export SERVER_IP=", { "Fn::GetAtt": [ "ConsulServer", "PrivateIp" ] }, "\n",
          "nohup ~/consul agent -pid-file ~/consul.pid -join $SERVER_IP -data-dir /opt/consul -dc us-west-1-test &", "\n"
        ]]}}
      }
    }

  },

  "Outputs" : {
    "URL" : {
      "Description" : "The URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://localhost" ] ] }
    }
  }
}